package com.csvikram._1_50;

/**
 * @author vikram.choudhary 2019-01-01
 */

public class _02_Even_Fibonacci_Numbers {

	/*
	Problem statement:,
	 */

	/**
	 * Problem description:
	 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
	 * starting with 1 and 2, the first 10 terms will be:
	 *
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 *
	 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
	 * even-valued terms.
	 *
	 */
	public static void main(String[] args) {
		System.out.printf("Even Fibonacci number sum uto 4 million = %d \n", findEvenNumberSumFibonacci(4000000));
		System.out.printf("Even Fibonacci number sum uto 4 million = %d \n", findEvenNumberSumFibonacciEvenTermOnly(4000000));
	}

	private static long findEvenNumberSumFibonacci(int n) {
		int current = 2;
		int prev = 1;
		int next = 3;
		long sum = 0;
		while(current <= n) {
			if (current % 2 == 0) {
				sum += current;
			}
			current = current + prev;
			prev = current - prev;
		}

		return sum;
	}

	private static long findEvenNumberSumFibonacciEvenTermOnly(int n) {
		long sum = 0;
		int prev = 0;
		int current = 2;
		while (current <= n) {
			sum += current;
			int temp = current;
			current = 4*current + prev;
			prev = temp;
		}
		return sum;
	}
}
